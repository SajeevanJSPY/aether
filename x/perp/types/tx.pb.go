// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: aether/perp/v1/tx.proto

package types

import (
	context "context"
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgOpenPosition struct {
	Trader   string                      `protobuf:"bytes,1,opt,name=trader,proto3" json:"trader,omitempty"`
	IsLong   bool                        `protobuf:"varint,2,opt,name=is_long,json=isLong,proto3" json:"is_long,omitempty"`
	Margin   *types.DecCoin              `protobuf:"bytes,3,opt,name=margin,proto3" json:"margin,omitempty"`
	Leverage cosmossdk_io_math.LegacyDec `protobuf:"bytes,4,opt,name=leverage,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"leverage"`
	PoolId   uint64                      `protobuf:"varint,5,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
}

func (m *MsgOpenPosition) Reset()         { *m = MsgOpenPosition{} }
func (m *MsgOpenPosition) String() string { return proto.CompactTextString(m) }
func (*MsgOpenPosition) ProtoMessage()    {}
func (*MsgOpenPosition) Descriptor() ([]byte, []int) {
	return fileDescriptor_314adeddae5c4eac, []int{0}
}
func (m *MsgOpenPosition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgOpenPosition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgOpenPosition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgOpenPosition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgOpenPosition.Merge(m, src)
}
func (m *MsgOpenPosition) XXX_Size() int {
	return m.Size()
}
func (m *MsgOpenPosition) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgOpenPosition.DiscardUnknown(m)
}

var xxx_messageInfo_MsgOpenPosition proto.InternalMessageInfo

func (m *MsgOpenPosition) GetTrader() string {
	if m != nil {
		return m.Trader
	}
	return ""
}

func (m *MsgOpenPosition) GetIsLong() bool {
	if m != nil {
		return m.IsLong
	}
	return false
}

func (m *MsgOpenPosition) GetMargin() *types.DecCoin {
	if m != nil {
		return m.Margin
	}
	return nil
}

func (m *MsgOpenPosition) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

type MsgOpenPositionResponse struct {
	PositionId uint64 `protobuf:"varint,1,opt,name=position_id,json=positionId,proto3" json:"position_id,omitempty"`
}

func (m *MsgOpenPositionResponse) Reset()         { *m = MsgOpenPositionResponse{} }
func (m *MsgOpenPositionResponse) String() string { return proto.CompactTextString(m) }
func (*MsgOpenPositionResponse) ProtoMessage()    {}
func (*MsgOpenPositionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_314adeddae5c4eac, []int{1}
}
func (m *MsgOpenPositionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgOpenPositionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgOpenPositionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgOpenPositionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgOpenPositionResponse.Merge(m, src)
}
func (m *MsgOpenPositionResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgOpenPositionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgOpenPositionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgOpenPositionResponse proto.InternalMessageInfo

func (m *MsgOpenPositionResponse) GetPositionId() uint64 {
	if m != nil {
		return m.PositionId
	}
	return 0
}

type MsgClosePosition struct {
	Trader     string `protobuf:"bytes,1,opt,name=trader,proto3" json:"trader,omitempty"`
	PositionId uint64 `protobuf:"varint,2,opt,name=position_id,json=positionId,proto3" json:"position_id,omitempty"`
}

func (m *MsgClosePosition) Reset()         { *m = MsgClosePosition{} }
func (m *MsgClosePosition) String() string { return proto.CompactTextString(m) }
func (*MsgClosePosition) ProtoMessage()    {}
func (*MsgClosePosition) Descriptor() ([]byte, []int) {
	return fileDescriptor_314adeddae5c4eac, []int{2}
}
func (m *MsgClosePosition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClosePosition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClosePosition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClosePosition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClosePosition.Merge(m, src)
}
func (m *MsgClosePosition) XXX_Size() int {
	return m.Size()
}
func (m *MsgClosePosition) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClosePosition.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClosePosition proto.InternalMessageInfo

func (m *MsgClosePosition) GetTrader() string {
	if m != nil {
		return m.Trader
	}
	return ""
}

func (m *MsgClosePosition) GetPositionId() uint64 {
	if m != nil {
		return m.PositionId
	}
	return 0
}

type MsgClosePositionResponse struct {
}

func (m *MsgClosePositionResponse) Reset()         { *m = MsgClosePositionResponse{} }
func (m *MsgClosePositionResponse) String() string { return proto.CompactTextString(m) }
func (*MsgClosePositionResponse) ProtoMessage()    {}
func (*MsgClosePositionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_314adeddae5c4eac, []int{3}
}
func (m *MsgClosePositionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgClosePositionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgClosePositionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgClosePositionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgClosePositionResponse.Merge(m, src)
}
func (m *MsgClosePositionResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgClosePositionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgClosePositionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgClosePositionResponse proto.InternalMessageInfo

type MsgLiquidate struct {
	Liquidator string `protobuf:"bytes,1,opt,name=liquidator,proto3" json:"liquidator,omitempty"`
	PositionId uint64 `protobuf:"varint,2,opt,name=position_id,json=positionId,proto3" json:"position_id,omitempty"`
}

func (m *MsgLiquidate) Reset()         { *m = MsgLiquidate{} }
func (m *MsgLiquidate) String() string { return proto.CompactTextString(m) }
func (*MsgLiquidate) ProtoMessage()    {}
func (*MsgLiquidate) Descriptor() ([]byte, []int) {
	return fileDescriptor_314adeddae5c4eac, []int{4}
}
func (m *MsgLiquidate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgLiquidate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgLiquidate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgLiquidate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgLiquidate.Merge(m, src)
}
func (m *MsgLiquidate) XXX_Size() int {
	return m.Size()
}
func (m *MsgLiquidate) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgLiquidate.DiscardUnknown(m)
}

var xxx_messageInfo_MsgLiquidate proto.InternalMessageInfo

func (m *MsgLiquidate) GetLiquidator() string {
	if m != nil {
		return m.Liquidator
	}
	return ""
}

func (m *MsgLiquidate) GetPositionId() uint64 {
	if m != nil {
		return m.PositionId
	}
	return 0
}

type MsgLiquidateResponse struct {
}

func (m *MsgLiquidateResponse) Reset()         { *m = MsgLiquidateResponse{} }
func (m *MsgLiquidateResponse) String() string { return proto.CompactTextString(m) }
func (*MsgLiquidateResponse) ProtoMessage()    {}
func (*MsgLiquidateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_314adeddae5c4eac, []int{5}
}
func (m *MsgLiquidateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgLiquidateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgLiquidateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgLiquidateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgLiquidateResponse.Merge(m, src)
}
func (m *MsgLiquidateResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgLiquidateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgLiquidateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgLiquidateResponse proto.InternalMessageInfo

type MsgUpdateFundingRate struct {
	Trader       string                      `protobuf:"bytes,1,opt,name=trader,proto3" json:"trader,omitempty"`
	PoolId       uint64                      `protobuf:"varint,2,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	FundingRate  cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=funding_rate,json=fundingRate,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"funding_rate"`
	FundingIndex cosmossdk_io_math.LegacyDec `protobuf:"bytes,4,opt,name=funding_index,json=fundingIndex,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"funding_index"`
}

func (m *MsgUpdateFundingRate) Reset()         { *m = MsgUpdateFundingRate{} }
func (m *MsgUpdateFundingRate) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateFundingRate) ProtoMessage()    {}
func (*MsgUpdateFundingRate) Descriptor() ([]byte, []int) {
	return fileDescriptor_314adeddae5c4eac, []int{6}
}
func (m *MsgUpdateFundingRate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateFundingRate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateFundingRate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateFundingRate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateFundingRate.Merge(m, src)
}
func (m *MsgUpdateFundingRate) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateFundingRate) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateFundingRate.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateFundingRate proto.InternalMessageInfo

func (m *MsgUpdateFundingRate) GetTrader() string {
	if m != nil {
		return m.Trader
	}
	return ""
}

func (m *MsgUpdateFundingRate) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

type MsgUpdateFundingRateResponse struct {
}

func (m *MsgUpdateFundingRateResponse) Reset()         { *m = MsgUpdateFundingRateResponse{} }
func (m *MsgUpdateFundingRateResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateFundingRateResponse) ProtoMessage()    {}
func (*MsgUpdateFundingRateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_314adeddae5c4eac, []int{7}
}
func (m *MsgUpdateFundingRateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateFundingRateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateFundingRateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateFundingRateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateFundingRateResponse.Merge(m, src)
}
func (m *MsgUpdateFundingRateResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateFundingRateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateFundingRateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateFundingRateResponse proto.InternalMessageInfo

type MsgApplyFundingPayment struct {
	Trader      string   `protobuf:"bytes,1,opt,name=trader,proto3" json:"trader,omitempty"`
	PositionIds []uint64 `protobuf:"varint,2,rep,packed,name=position_ids,json=positionIds,proto3" json:"position_ids,omitempty"`
}

func (m *MsgApplyFundingPayment) Reset()         { *m = MsgApplyFundingPayment{} }
func (m *MsgApplyFundingPayment) String() string { return proto.CompactTextString(m) }
func (*MsgApplyFundingPayment) ProtoMessage()    {}
func (*MsgApplyFundingPayment) Descriptor() ([]byte, []int) {
	return fileDescriptor_314adeddae5c4eac, []int{8}
}
func (m *MsgApplyFundingPayment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgApplyFundingPayment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgApplyFundingPayment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgApplyFundingPayment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgApplyFundingPayment.Merge(m, src)
}
func (m *MsgApplyFundingPayment) XXX_Size() int {
	return m.Size()
}
func (m *MsgApplyFundingPayment) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgApplyFundingPayment.DiscardUnknown(m)
}

var xxx_messageInfo_MsgApplyFundingPayment proto.InternalMessageInfo

func (m *MsgApplyFundingPayment) GetTrader() string {
	if m != nil {
		return m.Trader
	}
	return ""
}

func (m *MsgApplyFundingPayment) GetPositionIds() []uint64 {
	if m != nil {
		return m.PositionIds
	}
	return nil
}

type MsgApplyFundingPaymentRespone struct {
}

func (m *MsgApplyFundingPaymentRespone) Reset()         { *m = MsgApplyFundingPaymentRespone{} }
func (m *MsgApplyFundingPaymentRespone) String() string { return proto.CompactTextString(m) }
func (*MsgApplyFundingPaymentRespone) ProtoMessage()    {}
func (*MsgApplyFundingPaymentRespone) Descriptor() ([]byte, []int) {
	return fileDescriptor_314adeddae5c4eac, []int{9}
}
func (m *MsgApplyFundingPaymentRespone) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgApplyFundingPaymentRespone) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgApplyFundingPaymentRespone.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgApplyFundingPaymentRespone) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgApplyFundingPaymentRespone.Merge(m, src)
}
func (m *MsgApplyFundingPaymentRespone) XXX_Size() int {
	return m.Size()
}
func (m *MsgApplyFundingPaymentRespone) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgApplyFundingPaymentRespone.DiscardUnknown(m)
}

var xxx_messageInfo_MsgApplyFundingPaymentRespone proto.InternalMessageInfo

type MsgSettleFundingPayment struct {
	Trader     string                      `protobuf:"bytes,1,opt,name=trader,proto3" json:"trader,omitempty"`
	PositionId uint64                      `protobuf:"varint,2,opt,name=position_id,json=positionId,proto3" json:"position_id,omitempty"`
	Amount     cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=amount,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"amount"`
}

func (m *MsgSettleFundingPayment) Reset()         { *m = MsgSettleFundingPayment{} }
func (m *MsgSettleFundingPayment) String() string { return proto.CompactTextString(m) }
func (*MsgSettleFundingPayment) ProtoMessage()    {}
func (*MsgSettleFundingPayment) Descriptor() ([]byte, []int) {
	return fileDescriptor_314adeddae5c4eac, []int{10}
}
func (m *MsgSettleFundingPayment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSettleFundingPayment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSettleFundingPayment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSettleFundingPayment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSettleFundingPayment.Merge(m, src)
}
func (m *MsgSettleFundingPayment) XXX_Size() int {
	return m.Size()
}
func (m *MsgSettleFundingPayment) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSettleFundingPayment.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSettleFundingPayment proto.InternalMessageInfo

func (m *MsgSettleFundingPayment) GetTrader() string {
	if m != nil {
		return m.Trader
	}
	return ""
}

func (m *MsgSettleFundingPayment) GetPositionId() uint64 {
	if m != nil {
		return m.PositionId
	}
	return 0
}

type MsgSettleFundingPaymentResponse struct {
}

func (m *MsgSettleFundingPaymentResponse) Reset()         { *m = MsgSettleFundingPaymentResponse{} }
func (m *MsgSettleFundingPaymentResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSettleFundingPaymentResponse) ProtoMessage()    {}
func (*MsgSettleFundingPaymentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_314adeddae5c4eac, []int{11}
}
func (m *MsgSettleFundingPaymentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSettleFundingPaymentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSettleFundingPaymentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSettleFundingPaymentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSettleFundingPaymentResponse.Merge(m, src)
}
func (m *MsgSettleFundingPaymentResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSettleFundingPaymentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSettleFundingPaymentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSettleFundingPaymentResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgOpenPosition)(nil), "aether.perp.v1.MsgOpenPosition")
	proto.RegisterType((*MsgOpenPositionResponse)(nil), "aether.perp.v1.MsgOpenPositionResponse")
	proto.RegisterType((*MsgClosePosition)(nil), "aether.perp.v1.MsgClosePosition")
	proto.RegisterType((*MsgClosePositionResponse)(nil), "aether.perp.v1.MsgClosePositionResponse")
	proto.RegisterType((*MsgLiquidate)(nil), "aether.perp.v1.MsgLiquidate")
	proto.RegisterType((*MsgLiquidateResponse)(nil), "aether.perp.v1.MsgLiquidateResponse")
	proto.RegisterType((*MsgUpdateFundingRate)(nil), "aether.perp.v1.MsgUpdateFundingRate")
	proto.RegisterType((*MsgUpdateFundingRateResponse)(nil), "aether.perp.v1.MsgUpdateFundingRateResponse")
	proto.RegisterType((*MsgApplyFundingPayment)(nil), "aether.perp.v1.MsgApplyFundingPayment")
	proto.RegisterType((*MsgApplyFundingPaymentRespone)(nil), "aether.perp.v1.MsgApplyFundingPaymentRespone")
	proto.RegisterType((*MsgSettleFundingPayment)(nil), "aether.perp.v1.MsgSettleFundingPayment")
	proto.RegisterType((*MsgSettleFundingPaymentResponse)(nil), "aether.perp.v1.MsgSettleFundingPaymentResponse")
}

func init() { proto.RegisterFile("aether/perp/v1/tx.proto", fileDescriptor_314adeddae5c4eac) }

var fileDescriptor_314adeddae5c4eac = []byte{
	// 814 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0x5f, 0x4f, 0xc3, 0x54,
	0x14, 0x5f, 0xc7, 0x98, 0x70, 0x37, 0x50, 0x0a, 0x61, 0xb5, 0x60, 0x37, 0xaa, 0xd1, 0x65, 0xba,
	0x36, 0x43, 0x9f, 0xf6, 0x26, 0x2c, 0x26, 0x4b, 0x58, 0x20, 0xf5, 0x4f, 0x8c, 0x3e, 0x2c, 0x5d,
	0x7b, 0xb9, 0x54, 0xdb, 0xde, 0x6b, 0x6f, 0xb7, 0xb0, 0x27, 0x8d, 0xf1, 0xc9, 0x27, 0xbf, 0x81,
	0x5f, 0x81, 0x07, 0x3f, 0x04, 0xf1, 0x89, 0xf8, 0x64, 0x4c, 0x24, 0x06, 0x1e, 0xf8, 0x1a, 0xa6,
	0xb7, 0xb7, 0x65, 0x2b, 0x85, 0x2d, 0xbc, 0x90, 0xde, 0x7b, 0x7e, 0xe7, 0x77, 0x7e, 0xe7, 0xcf,
	0x3d, 0x0c, 0xd4, 0x4c, 0x18, 0x5e, 0xc0, 0x40, 0x27, 0x30, 0x20, 0xfa, 0xa4, 0xa3, 0x87, 0x97,
	0x1a, 0x09, 0x70, 0x88, 0xc5, 0xcd, 0xd8, 0xa0, 0x45, 0x06, 0x6d, 0xd2, 0x91, 0x77, 0x10, 0x46,
	0x98, 0x99, 0xf4, 0xe8, 0x2b, 0x46, 0xc9, 0x5b, 0xa6, 0xe7, 0xf8, 0x58, 0x67, 0x7f, 0xf9, 0xd5,
	0xdb, 0x16, 0xa6, 0x1e, 0xa6, 0xc3, 0x18, 0x1b, 0x1f, 0xb8, 0x49, 0x89, 0x4f, 0xfa, 0xc8, 0xa4,
	0x50, 0x9f, 0x74, 0x46, 0x30, 0x34, 0x3b, 0xba, 0x85, 0x1d, 0x9f, 0xdb, 0x6b, 0xdc, 0xee, 0x51,
	0x14, 0x69, 0xf1, 0x28, 0x8a, 0x0d, 0xea, 0x2f, 0x45, 0xf0, 0xe6, 0x80, 0xa2, 0x53, 0x02, 0xfd,
	0x33, 0x4c, 0x9d, 0xd0, 0xc1, 0xbe, 0xb8, 0x0b, 0xca, 0x61, 0x60, 0xda, 0x30, 0x90, 0x84, 0x86,
	0xd0, 0x5c, 0x37, 0xf8, 0x49, 0xac, 0x81, 0x37, 0x1c, 0x3a, 0x74, 0xb1, 0x8f, 0xa4, 0x62, 0x43,
	0x68, 0xae, 0x19, 0x65, 0x87, 0x9e, 0x60, 0x1f, 0x89, 0x9f, 0x80, 0xb2, 0x67, 0x06, 0xc8, 0xf1,
	0xa5, 0x95, 0x86, 0xd0, 0xac, 0x1c, 0xee, 0x6b, 0x5c, 0x5c, 0x24, 0x47, 0xe3, 0x72, 0xb4, 0x1e,
	0xb4, 0x8e, 0xb1, 0xe3, 0x1b, 0x1c, 0x2b, 0x0e, 0xc0, 0x9a, 0x0b, 0x27, 0x30, 0x30, 0x11, 0x94,
	0x4a, 0x51, 0xa0, 0xa3, 0xce, 0xf5, 0x6d, 0xbd, 0xf0, 0xcf, 0x6d, 0x7d, 0x2f, 0x76, 0xa7, 0xf6,
	0xf7, 0x9a, 0x83, 0x75, 0xcf, 0x0c, 0x2f, 0xb4, 0x13, 0x88, 0x4c, 0x6b, 0xda, 0x83, 0xd6, 0x5f,
	0x7f, 0xb4, 0x01, 0x67, 0xef, 0x41, 0xcb, 0x48, 0x29, 0x22, 0x75, 0x04, 0x63, 0x77, 0xe8, 0xd8,
	0xd2, 0x6a, 0x43, 0x68, 0x96, 0x8c, 0x72, 0x74, 0xec, 0xdb, 0x5d, 0xf5, 0xe7, 0x87, 0xab, 0x16,
	0xcf, 0xe1, 0xd7, 0x87, 0xab, 0x96, 0xc8, 0x3a, 0x82, 0x09, 0xf4, 0xdb, 0x84, 0xa7, 0xac, 0x76,
	0x41, 0x2d, 0x53, 0x05, 0x03, 0x52, 0x82, 0x7d, 0x0a, 0xc5, 0x3a, 0xa8, 0x24, 0xb0, 0x88, 0x5b,
	0x60, 0xdc, 0x20, 0xb9, 0xea, 0xdb, 0x2a, 0x01, 0x6f, 0x0d, 0x28, 0x3a, 0x76, 0x31, 0x85, 0x0b,
	0x4b, 0x98, 0x21, 0x2b, 0x66, 0xc9, 0xba, 0xef, 0x66, 0xc4, 0x6e, 0x33, 0xb1, 0x56, 0x44, 0xfe,
	0xa8, 0x56, 0x06, 0x52, 0x36, 0x62, 0x22, 0x57, 0xa5, 0xa0, 0x3a, 0xa0, 0xe8, 0xc4, 0xf9, 0x61,
	0xec, 0xd8, 0x66, 0x08, 0x45, 0x05, 0x00, 0x97, 0x1f, 0x70, 0xa2, 0x66, 0xe6, 0x66, 0xb1, 0x22,
	0x56, 0xbe, 0x19, 0x8f, 0x48, 0xd5, 0x26, 0x53, 0x95, 0xdc, 0x41, 0x75, 0x17, 0xec, 0xcc, 0x06,
	0x4d, 0xc5, 0xfc, 0x5e, 0x64, 0x86, 0x2f, 0x49, 0x74, 0xfb, 0xd9, 0xd8, 0xb7, 0x1d, 0x1f, 0x19,
	0x91, 0xaa, 0x17, 0x46, 0x2c, 0x69, 0x62, 0x71, 0xb6, 0x89, 0xe2, 0x17, 0xa0, 0x7a, 0x1e, 0xfb,
	0x0f, 0x03, 0x33, 0x84, 0x6c, 0xd0, 0x5e, 0x35, 0x30, 0x95, 0xf3, 0x19, 0x19, 0x5f, 0x81, 0x8d,
	0x84, 0xd5, 0xf1, 0x6d, 0x78, 0xf9, 0xfa, 0x39, 0x4c, 0xd4, 0xf5, 0x23, 0x9a, 0x6e, 0x33, 0xd3,
	0x45, 0x89, 0xd5, 0x6b, 0xcc, 0xca, 0xd0, 0xe6, 0xc8, 0x76, 0x94, 0x87, 0xaa, 0x80, 0xfd, 0xbc,
	0x02, 0xa5, 0x15, 0xfc, 0x11, 0xec, 0x0e, 0x28, 0xfa, 0x94, 0x10, 0x77, 0xca, 0xcd, 0x67, 0xe6,
	0xd4, 0x83, 0x7e, 0xf8, 0x6c, 0x09, 0x0f, 0x40, 0x75, 0xa6, 0xa1, 0x54, 0x2a, 0x36, 0x56, 0x9a,
	0x25, 0xa3, 0xf2, 0xd8, 0x51, 0xda, 0x6d, 0x65, 0xe4, 0xc9, 0x4c, 0x9e, 0x19, 0x05, 0x49, 0xd5,
	0x91, 0x38, 0x8c, 0x5a, 0x07, 0xef, 0xe4, 0x0b, 0x88, 0x25, 0x42, 0xf5, 0x4f, 0x81, 0xbd, 0x9d,
	0xcf, 0x61, 0x18, 0xba, 0x70, 0x49, 0x8d, 0x8b, 0x86, 0x4e, 0xec, 0x83, 0xb2, 0xe9, 0xe1, 0xb1,
	0x1f, 0xbe, 0xbe, 0xd1, 0x9c, 0xa0, 0xfb, 0x61, 0x26, 0xd9, 0x3d, 0x96, 0x2c, 0x65, 0x72, 0x9f,
	0x64, 0x7b, 0x00, 0xea, 0xcf, 0xe4, 0x92, 0x74, 0xe4, 0xf0, 0xdf, 0x12, 0x58, 0x19, 0x50, 0x24,
	0x7e, 0x0d, 0xaa, 0x73, 0x5b, 0xb3, 0xae, 0xcd, 0xef, 0x75, 0x2d, 0xb3, 0x50, 0xe4, 0x0f, 0x16,
	0x00, 0xd2, 0x8d, 0xf3, 0x2d, 0xd8, 0x98, 0xdf, 0x26, 0x8d, 0x1c, 0xcf, 0x39, 0x84, 0xdc, 0x5c,
	0x84, 0x48, 0xc9, 0x4f, 0xc1, 0xfa, 0xe3, 0x72, 0xd8, 0xcf, 0x71, 0x4b, 0xad, 0xf2, 0x7b, 0x2f,
	0x59, 0x53, 0x42, 0x04, 0xb6, 0x9e, 0xbe, 0xef, 0x3c, 0xd7, 0x27, 0x28, 0xf9, 0xa3, 0x65, 0x50,
	0x69, 0x20, 0x17, 0x6c, 0xe7, 0xbd, 0x83, 0xf7, 0x73, 0x48, 0x72, 0x70, 0x72, 0x7b, 0x39, 0x1c,
	0x1f, 0x6b, 0x91, 0x80, 0x9d, 0xdc, 0x91, 0xce, 0xeb, 0x62, 0x1e, 0x50, 0xd6, 0x97, 0x04, 0x26,
	0xf9, 0xc9, 0xab, 0x3f, 0x3d, 0x5c, 0xb5, 0x84, 0xa3, 0xde, 0xf5, 0x9d, 0x22, 0xdc, 0xdc, 0x29,
	0xc2, 0x7f, 0x77, 0x8a, 0xf0, 0xdb, 0xbd, 0x52, 0xb8, 0xb9, 0x57, 0x0a, 0x7f, 0xdf, 0x2b, 0x85,
	0x6f, 0x5a, 0xc8, 0x09, 0x2f, 0xc6, 0x23, 0xcd, 0xc2, 0x9e, 0x1e, 0x73, 0xb7, 0x49, 0x80, 0xbf,
	0xe3, 0xdf, 0xfa, 0x65, 0xfc, 0x53, 0x23, 0x9c, 0x12, 0x48, 0x47, 0x65, 0xf6, 0xef, 0xfd, 0xe3,
	0xff, 0x03, 0x00, 0x00, 0xff, 0xff, 0x66, 0x22, 0xb4, 0x89, 0x86, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	OpenPosition(ctx context.Context, in *MsgOpenPosition, opts ...grpc.CallOption) (*MsgOpenPositionResponse, error)
	ClosePosition(ctx context.Context, in *MsgClosePosition, opts ...grpc.CallOption) (*MsgClosePositionResponse, error)
	Liquidate(ctx context.Context, in *MsgLiquidate, opts ...grpc.CallOption) (*MsgLiquidateResponse, error)
	UpdateFundingRate(ctx context.Context, in *MsgUpdateFundingRate, opts ...grpc.CallOption) (*MsgUpdateFundingRateResponse, error)
	ApplyFundingPayment(ctx context.Context, in *MsgApplyFundingPayment, opts ...grpc.CallOption) (*MsgApplyFundingPaymentRespone, error)
	SettleFundingPayment(ctx context.Context, in *MsgSettleFundingPayment, opts ...grpc.CallOption) (*MsgSettleFundingPaymentResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) OpenPosition(ctx context.Context, in *MsgOpenPosition, opts ...grpc.CallOption) (*MsgOpenPositionResponse, error) {
	out := new(MsgOpenPositionResponse)
	err := c.cc.Invoke(ctx, "/aether.perp.v1.Msg/OpenPosition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ClosePosition(ctx context.Context, in *MsgClosePosition, opts ...grpc.CallOption) (*MsgClosePositionResponse, error) {
	out := new(MsgClosePositionResponse)
	err := c.cc.Invoke(ctx, "/aether.perp.v1.Msg/ClosePosition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Liquidate(ctx context.Context, in *MsgLiquidate, opts ...grpc.CallOption) (*MsgLiquidateResponse, error) {
	out := new(MsgLiquidateResponse)
	err := c.cc.Invoke(ctx, "/aether.perp.v1.Msg/Liquidate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateFundingRate(ctx context.Context, in *MsgUpdateFundingRate, opts ...grpc.CallOption) (*MsgUpdateFundingRateResponse, error) {
	out := new(MsgUpdateFundingRateResponse)
	err := c.cc.Invoke(ctx, "/aether.perp.v1.Msg/UpdateFundingRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ApplyFundingPayment(ctx context.Context, in *MsgApplyFundingPayment, opts ...grpc.CallOption) (*MsgApplyFundingPaymentRespone, error) {
	out := new(MsgApplyFundingPaymentRespone)
	err := c.cc.Invoke(ctx, "/aether.perp.v1.Msg/ApplyFundingPayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SettleFundingPayment(ctx context.Context, in *MsgSettleFundingPayment, opts ...grpc.CallOption) (*MsgSettleFundingPaymentResponse, error) {
	out := new(MsgSettleFundingPaymentResponse)
	err := c.cc.Invoke(ctx, "/aether.perp.v1.Msg/SettleFundingPayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	OpenPosition(context.Context, *MsgOpenPosition) (*MsgOpenPositionResponse, error)
	ClosePosition(context.Context, *MsgClosePosition) (*MsgClosePositionResponse, error)
	Liquidate(context.Context, *MsgLiquidate) (*MsgLiquidateResponse, error)
	UpdateFundingRate(context.Context, *MsgUpdateFundingRate) (*MsgUpdateFundingRateResponse, error)
	ApplyFundingPayment(context.Context, *MsgApplyFundingPayment) (*MsgApplyFundingPaymentRespone, error)
	SettleFundingPayment(context.Context, *MsgSettleFundingPayment) (*MsgSettleFundingPaymentResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) OpenPosition(ctx context.Context, req *MsgOpenPosition) (*MsgOpenPositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenPosition not implemented")
}
func (*UnimplementedMsgServer) ClosePosition(ctx context.Context, req *MsgClosePosition) (*MsgClosePositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClosePosition not implemented")
}
func (*UnimplementedMsgServer) Liquidate(ctx context.Context, req *MsgLiquidate) (*MsgLiquidateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Liquidate not implemented")
}
func (*UnimplementedMsgServer) UpdateFundingRate(ctx context.Context, req *MsgUpdateFundingRate) (*MsgUpdateFundingRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFundingRate not implemented")
}
func (*UnimplementedMsgServer) ApplyFundingPayment(ctx context.Context, req *MsgApplyFundingPayment) (*MsgApplyFundingPaymentRespone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyFundingPayment not implemented")
}
func (*UnimplementedMsgServer) SettleFundingPayment(ctx context.Context, req *MsgSettleFundingPayment) (*MsgSettleFundingPaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SettleFundingPayment not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_OpenPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgOpenPosition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).OpenPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aether.perp.v1.Msg/OpenPosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).OpenPosition(ctx, req.(*MsgOpenPosition))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ClosePosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgClosePosition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ClosePosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aether.perp.v1.Msg/ClosePosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ClosePosition(ctx, req.(*MsgClosePosition))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Liquidate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgLiquidate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Liquidate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aether.perp.v1.Msg/Liquidate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Liquidate(ctx, req.(*MsgLiquidate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateFundingRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateFundingRate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateFundingRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aether.perp.v1.Msg/UpdateFundingRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateFundingRate(ctx, req.(*MsgUpdateFundingRate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ApplyFundingPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgApplyFundingPayment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ApplyFundingPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aether.perp.v1.Msg/ApplyFundingPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ApplyFundingPayment(ctx, req.(*MsgApplyFundingPayment))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SettleFundingPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSettleFundingPayment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SettleFundingPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aether.perp.v1.Msg/SettleFundingPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SettleFundingPayment(ctx, req.(*MsgSettleFundingPayment))
	}
	return interceptor(ctx, in, info, handler)
}

var Msg_serviceDesc = _Msg_serviceDesc
var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "aether.perp.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OpenPosition",
			Handler:    _Msg_OpenPosition_Handler,
		},
		{
			MethodName: "ClosePosition",
			Handler:    _Msg_ClosePosition_Handler,
		},
		{
			MethodName: "Liquidate",
			Handler:    _Msg_Liquidate_Handler,
		},
		{
			MethodName: "UpdateFundingRate",
			Handler:    _Msg_UpdateFundingRate_Handler,
		},
		{
			MethodName: "ApplyFundingPayment",
			Handler:    _Msg_ApplyFundingPayment_Handler,
		},
		{
			MethodName: "SettleFundingPayment",
			Handler:    _Msg_SettleFundingPayment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "aether/perp/v1/tx.proto",
}

func (m *MsgOpenPosition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgOpenPosition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgOpenPosition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PoolId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x28
	}
	{
		size := m.Leverage.Size()
		i -= size
		if _, err := m.Leverage.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.Margin != nil {
		{
			size, err := m.Margin.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.IsLong {
		i--
		if m.IsLong {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Trader) > 0 {
		i -= len(m.Trader)
		copy(dAtA[i:], m.Trader)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Trader)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgOpenPositionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgOpenPositionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgOpenPositionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PositionId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PositionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgClosePosition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClosePosition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClosePosition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PositionId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PositionId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Trader) > 0 {
		i -= len(m.Trader)
		copy(dAtA[i:], m.Trader)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Trader)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgClosePositionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgClosePositionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgClosePositionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgLiquidate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgLiquidate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgLiquidate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PositionId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PositionId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Liquidator) > 0 {
		i -= len(m.Liquidator)
		copy(dAtA[i:], m.Liquidator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Liquidator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgLiquidateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgLiquidateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgLiquidateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateFundingRate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateFundingRate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateFundingRate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.FundingIndex.Size()
		i -= size
		if _, err := m.FundingIndex.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.FundingRate.Size()
		i -= size
		if _, err := m.FundingRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.PoolId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Trader) > 0 {
		i -= len(m.Trader)
		copy(dAtA[i:], m.Trader)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Trader)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateFundingRateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateFundingRateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateFundingRateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgApplyFundingPayment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgApplyFundingPayment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgApplyFundingPayment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PositionIds) > 0 {
		dAtA3 := make([]byte, len(m.PositionIds)*10)
		var j2 int
		for _, num := range m.PositionIds {
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		i -= j2
		copy(dAtA[i:], dAtA3[:j2])
		i = encodeVarintTx(dAtA, i, uint64(j2))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Trader) > 0 {
		i -= len(m.Trader)
		copy(dAtA[i:], m.Trader)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Trader)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgApplyFundingPaymentRespone) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgApplyFundingPaymentRespone) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgApplyFundingPaymentRespone) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSettleFundingPayment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSettleFundingPayment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSettleFundingPayment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.PositionId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.PositionId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Trader) > 0 {
		i -= len(m.Trader)
		copy(dAtA[i:], m.Trader)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Trader)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSettleFundingPaymentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSettleFundingPaymentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSettleFundingPaymentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgOpenPosition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Trader)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.IsLong {
		n += 2
	}
	if m.Margin != nil {
		l = m.Margin.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Leverage.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.PoolId != 0 {
		n += 1 + sovTx(uint64(m.PoolId))
	}
	return n
}

func (m *MsgOpenPositionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PositionId != 0 {
		n += 1 + sovTx(uint64(m.PositionId))
	}
	return n
}

func (m *MsgClosePosition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Trader)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.PositionId != 0 {
		n += 1 + sovTx(uint64(m.PositionId))
	}
	return n
}

func (m *MsgClosePositionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgLiquidate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Liquidator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.PositionId != 0 {
		n += 1 + sovTx(uint64(m.PositionId))
	}
	return n
}

func (m *MsgLiquidateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateFundingRate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Trader)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.PoolId != 0 {
		n += 1 + sovTx(uint64(m.PoolId))
	}
	l = m.FundingRate.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.FundingIndex.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateFundingRateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgApplyFundingPayment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Trader)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.PositionIds) > 0 {
		l = 0
		for _, e := range m.PositionIds {
			l += sovTx(uint64(e))
		}
		n += 1 + sovTx(uint64(l)) + l
	}
	return n
}

func (m *MsgApplyFundingPaymentRespone) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSettleFundingPayment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Trader)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.PositionId != 0 {
		n += 1 + sovTx(uint64(m.PositionId))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgSettleFundingPaymentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgOpenPosition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgOpenPosition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgOpenPosition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trader", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Trader = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLong", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsLong = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Margin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Margin == nil {
				m.Margin = &types.DecCoin{}
			}
			if err := m.Margin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leverage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Leverage.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgOpenPositionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgOpenPositionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgOpenPositionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionId", wireType)
			}
			m.PositionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PositionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClosePosition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClosePosition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClosePosition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trader", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Trader = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionId", wireType)
			}
			m.PositionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PositionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgClosePositionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgClosePositionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgClosePositionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgLiquidate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgLiquidate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgLiquidate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Liquidator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Liquidator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionId", wireType)
			}
			m.PositionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PositionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgLiquidateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgLiquidateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgLiquidateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateFundingRate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateFundingRate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateFundingRate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trader", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Trader = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FundingRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FundingRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FundingIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FundingIndex.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateFundingRateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateFundingRateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateFundingRateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgApplyFundingPayment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgApplyFundingPayment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgApplyFundingPayment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trader", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Trader = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PositionIds = append(m.PositionIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTx
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTx
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTx
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.PositionIds) == 0 {
					m.PositionIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTx
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PositionIds = append(m.PositionIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgApplyFundingPaymentRespone) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgApplyFundingPaymentRespone: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgApplyFundingPaymentRespone: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSettleFundingPayment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSettleFundingPayment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSettleFundingPayment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trader", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Trader = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionId", wireType)
			}
			m.PositionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PositionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSettleFundingPaymentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSettleFundingPaymentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSettleFundingPaymentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
