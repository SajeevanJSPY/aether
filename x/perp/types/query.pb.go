// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: aether/perp/v1/query.proto

package types

import (
	context "context"
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryGetPositionRequest struct {
	PositionId string `protobuf:"bytes,1,opt,name=position_id,json=positionId,proto3" json:"position_id,omitempty"`
}

func (m *QueryGetPositionRequest) Reset()         { *m = QueryGetPositionRequest{} }
func (m *QueryGetPositionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPositionRequest) ProtoMessage()    {}
func (*QueryGetPositionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_05c259b300ab962e, []int{0}
}
func (m *QueryGetPositionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPositionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPositionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPositionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPositionRequest.Merge(m, src)
}
func (m *QueryGetPositionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPositionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPositionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPositionRequest proto.InternalMessageInfo

func (m *QueryGetPositionRequest) GetPositionId() string {
	if m != nil {
		return m.PositionId
	}
	return ""
}

type QueryGetPositionResponse struct {
	Trader string         `protobuf:"bytes,1,opt,name=trader,proto3" json:"trader,omitempty"`
	IsLong bool           `protobuf:"varint,2,opt,name=is_long,json=isLong,proto3" json:"is_long,omitempty"`
	Size_  string         `protobuf:"bytes,3,opt,name=size,proto3" json:"size,omitempty"`
	Margin *types.DecCoin `protobuf:"bytes,4,opt,name=margin,proto3" json:"margin,omitempty"`
}

func (m *QueryGetPositionResponse) Reset()         { *m = QueryGetPositionResponse{} }
func (m *QueryGetPositionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPositionResponse) ProtoMessage()    {}
func (*QueryGetPositionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_05c259b300ab962e, []int{1}
}
func (m *QueryGetPositionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPositionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPositionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPositionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPositionResponse.Merge(m, src)
}
func (m *QueryGetPositionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPositionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPositionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPositionResponse proto.InternalMessageInfo

func (m *QueryGetPositionResponse) GetTrader() string {
	if m != nil {
		return m.Trader
	}
	return ""
}

func (m *QueryGetPositionResponse) GetIsLong() bool {
	if m != nil {
		return m.IsLong
	}
	return false
}

func (m *QueryGetPositionResponse) GetSize_() string {
	if m != nil {
		return m.Size_
	}
	return ""
}

func (m *QueryGetPositionResponse) GetMargin() *types.DecCoin {
	if m != nil {
		return m.Margin
	}
	return nil
}

type QueryLiquidityRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryLiquidityRequest) Reset()         { *m = QueryLiquidityRequest{} }
func (m *QueryLiquidityRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLiquidityRequest) ProtoMessage()    {}
func (*QueryLiquidityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_05c259b300ab962e, []int{2}
}
func (m *QueryLiquidityRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLiquidityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLiquidityRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLiquidityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLiquidityRequest.Merge(m, src)
}
func (m *QueryLiquidityRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLiquidityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLiquidityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLiquidityRequest proto.InternalMessageInfo

func (m *QueryLiquidityRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryLiquidityResponse struct {
	Shares cosmossdk_io_math.LegacyDec `protobuf:"bytes,1,opt,name=shares,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"shares"`
}

func (m *QueryLiquidityResponse) Reset()         { *m = QueryLiquidityResponse{} }
func (m *QueryLiquidityResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLiquidityResponse) ProtoMessage()    {}
func (*QueryLiquidityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_05c259b300ab962e, []int{3}
}
func (m *QueryLiquidityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLiquidityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLiquidityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLiquidityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLiquidityResponse.Merge(m, src)
}
func (m *QueryLiquidityResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLiquidityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLiquidityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLiquidityResponse proto.InternalMessageInfo

type QueryGetLiquidationCandidatesRequest struct {
}

func (m *QueryGetLiquidationCandidatesRequest) Reset()         { *m = QueryGetLiquidationCandidatesRequest{} }
func (m *QueryGetLiquidationCandidatesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetLiquidationCandidatesRequest) ProtoMessage()    {}
func (*QueryGetLiquidationCandidatesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_05c259b300ab962e, []int{4}
}
func (m *QueryGetLiquidationCandidatesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLiquidationCandidatesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLiquidationCandidatesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLiquidationCandidatesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLiquidationCandidatesRequest.Merge(m, src)
}
func (m *QueryGetLiquidationCandidatesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLiquidationCandidatesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLiquidationCandidatesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLiquidationCandidatesRequest proto.InternalMessageInfo

type QueryGetLiquidationCandidatesResponse struct {
	Candidates []string `protobuf:"bytes,1,rep,name=candidates,proto3" json:"candidates,omitempty"`
}

func (m *QueryGetLiquidationCandidatesResponse) Reset()         { *m = QueryGetLiquidationCandidatesResponse{} }
func (m *QueryGetLiquidationCandidatesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetLiquidationCandidatesResponse) ProtoMessage()    {}
func (*QueryGetLiquidationCandidatesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_05c259b300ab962e, []int{5}
}
func (m *QueryGetLiquidationCandidatesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLiquidationCandidatesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLiquidationCandidatesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLiquidationCandidatesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLiquidationCandidatesResponse.Merge(m, src)
}
func (m *QueryGetLiquidationCandidatesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLiquidationCandidatesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLiquidationCandidatesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLiquidationCandidatesResponse proto.InternalMessageInfo

func (m *QueryGetLiquidationCandidatesResponse) GetCandidates() []string {
	if m != nil {
		return m.Candidates
	}
	return nil
}

type QueryGetFundingRateRequest struct {
}

func (m *QueryGetFundingRateRequest) Reset()         { *m = QueryGetFundingRateRequest{} }
func (m *QueryGetFundingRateRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetFundingRateRequest) ProtoMessage()    {}
func (*QueryGetFundingRateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_05c259b300ab962e, []int{6}
}
func (m *QueryGetFundingRateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetFundingRateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetFundingRateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetFundingRateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetFundingRateRequest.Merge(m, src)
}
func (m *QueryGetFundingRateRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetFundingRateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetFundingRateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetFundingRateRequest proto.InternalMessageInfo

type QueryGetFundingRateResponse struct {
	FundingRate cosmossdk_io_math.LegacyDec `protobuf:"bytes,1,opt,name=funding_rate,json=fundingRate,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"funding_rate"`
}

func (m *QueryGetFundingRateResponse) Reset()         { *m = QueryGetFundingRateResponse{} }
func (m *QueryGetFundingRateResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetFundingRateResponse) ProtoMessage()    {}
func (*QueryGetFundingRateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_05c259b300ab962e, []int{7}
}
func (m *QueryGetFundingRateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetFundingRateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetFundingRateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetFundingRateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetFundingRateResponse.Merge(m, src)
}
func (m *QueryGetFundingRateResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetFundingRateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetFundingRateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetFundingRateResponse proto.InternalMessageInfo

type QueryGetPositionFundingInfoRequest struct {
}

func (m *QueryGetPositionFundingInfoRequest) Reset()         { *m = QueryGetPositionFundingInfoRequest{} }
func (m *QueryGetPositionFundingInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPositionFundingInfoRequest) ProtoMessage()    {}
func (*QueryGetPositionFundingInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_05c259b300ab962e, []int{8}
}
func (m *QueryGetPositionFundingInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPositionFundingInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPositionFundingInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPositionFundingInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPositionFundingInfoRequest.Merge(m, src)
}
func (m *QueryGetPositionFundingInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPositionFundingInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPositionFundingInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPositionFundingInfoRequest proto.InternalMessageInfo

type QueryGetPositionFundingInfoResponse struct {
	FundingRate cosmossdk_io_math.LegacyDec `protobuf:"bytes,1,opt,name=funding_rate,json=fundingRate,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"funding_rate"`
}

func (m *QueryGetPositionFundingInfoResponse) Reset()         { *m = QueryGetPositionFundingInfoResponse{} }
func (m *QueryGetPositionFundingInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPositionFundingInfoResponse) ProtoMessage()    {}
func (*QueryGetPositionFundingInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_05c259b300ab962e, []int{9}
}
func (m *QueryGetPositionFundingInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPositionFundingInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPositionFundingInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPositionFundingInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPositionFundingInfoResponse.Merge(m, src)
}
func (m *QueryGetPositionFundingInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPositionFundingInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPositionFundingInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPositionFundingInfoResponse proto.InternalMessageInfo

type QueryGetAccruedFundingRequest struct {
}

func (m *QueryGetAccruedFundingRequest) Reset()         { *m = QueryGetAccruedFundingRequest{} }
func (m *QueryGetAccruedFundingRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAccruedFundingRequest) ProtoMessage()    {}
func (*QueryGetAccruedFundingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_05c259b300ab962e, []int{10}
}
func (m *QueryGetAccruedFundingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAccruedFundingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAccruedFundingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAccruedFundingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAccruedFundingRequest.Merge(m, src)
}
func (m *QueryGetAccruedFundingRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAccruedFundingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAccruedFundingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAccruedFundingRequest proto.InternalMessageInfo

type QueryGetAccruedFundingResponse struct {
	AccruedFunding cosmossdk_io_math.LegacyDec `protobuf:"bytes,1,opt,name=accrued_funding,json=accruedFunding,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"accrued_funding"`
}

func (m *QueryGetAccruedFundingResponse) Reset()         { *m = QueryGetAccruedFundingResponse{} }
func (m *QueryGetAccruedFundingResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetAccruedFundingResponse) ProtoMessage()    {}
func (*QueryGetAccruedFundingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_05c259b300ab962e, []int{11}
}
func (m *QueryGetAccruedFundingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAccruedFundingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAccruedFundingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAccruedFundingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAccruedFundingResponse.Merge(m, src)
}
func (m *QueryGetAccruedFundingResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAccruedFundingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAccruedFundingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAccruedFundingResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*QueryGetPositionRequest)(nil), "aether.perp.v1.QueryGetPositionRequest")
	proto.RegisterType((*QueryGetPositionResponse)(nil), "aether.perp.v1.QueryGetPositionResponse")
	proto.RegisterType((*QueryLiquidityRequest)(nil), "aether.perp.v1.QueryLiquidityRequest")
	proto.RegisterType((*QueryLiquidityResponse)(nil), "aether.perp.v1.QueryLiquidityResponse")
	proto.RegisterType((*QueryGetLiquidationCandidatesRequest)(nil), "aether.perp.v1.QueryGetLiquidationCandidatesRequest")
	proto.RegisterType((*QueryGetLiquidationCandidatesResponse)(nil), "aether.perp.v1.QueryGetLiquidationCandidatesResponse")
	proto.RegisterType((*QueryGetFundingRateRequest)(nil), "aether.perp.v1.QueryGetFundingRateRequest")
	proto.RegisterType((*QueryGetFundingRateResponse)(nil), "aether.perp.v1.QueryGetFundingRateResponse")
	proto.RegisterType((*QueryGetPositionFundingInfoRequest)(nil), "aether.perp.v1.QueryGetPositionFundingInfoRequest")
	proto.RegisterType((*QueryGetPositionFundingInfoResponse)(nil), "aether.perp.v1.QueryGetPositionFundingInfoResponse")
	proto.RegisterType((*QueryGetAccruedFundingRequest)(nil), "aether.perp.v1.QueryGetAccruedFundingRequest")
	proto.RegisterType((*QueryGetAccruedFundingResponse)(nil), "aether.perp.v1.QueryGetAccruedFundingResponse")
}

func init() { proto.RegisterFile("aether/perp/v1/query.proto", fileDescriptor_05c259b300ab962e) }

var fileDescriptor_05c259b300ab962e = []byte{
	// 664 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x55, 0xc1, 0x4f, 0x13, 0x4f,
	0x14, 0xee, 0xfe, 0x80, 0xf2, 0xf3, 0x95, 0x60, 0x9c, 0x28, 0xac, 0x0b, 0x6e, 0x9b, 0x15, 0xb0,
	0xc1, 0xb0, 0x9b, 0x02, 0x5e, 0xbc, 0x09, 0x8d, 0x84, 0x84, 0x83, 0x36, 0x9e, 0x48, 0x4c, 0x9d,
	0xee, 0x0e, 0xdb, 0x51, 0xbb, 0xb3, 0xec, 0x4c, 0x89, 0x55, 0x2f, 0x9e, 0xbc, 0x7a, 0xf1, 0x3f,
	0xd1, 0xff, 0x81, 0x23, 0xf1, 0x64, 0x3c, 0x10, 0x03, 0xff, 0x88, 0xd9, 0xce, 0x5b, 0x10, 0xda,
	0x52, 0x20, 0xf1, 0x36, 0xf3, 0xde, 0xf7, 0xbe, 0xef, 0x7b, 0xd3, 0xf7, 0xba, 0x60, 0x51, 0xa6,
	0x9a, 0x2c, 0xf1, 0x62, 0x96, 0xc4, 0xde, 0x5e, 0xc5, 0xdb, 0x6d, 0xb3, 0xa4, 0xe3, 0xc6, 0x89,
	0x50, 0x82, 0x4c, 0xea, 0x9c, 0x9b, 0xe6, 0xdc, 0xbd, 0x8a, 0x75, 0x3b, 0x14, 0xa1, 0xe8, 0xa6,
	0xbc, 0xf4, 0xa4, 0x51, 0xd6, 0x5d, 0x5f, 0xc8, 0x96, 0x90, 0x75, 0x9d, 0xd0, 0x17, 0x4c, 0xd9,
	0xfa, 0xe6, 0x35, 0xa8, 0x64, 0xde, 0x5e, 0xa5, 0xc1, 0x14, 0xad, 0x78, 0xbe, 0xe0, 0x91, 0xce,
	0x3b, 0x8f, 0x61, 0xfa, 0x79, 0xaa, 0xb7, 0xc1, 0xd4, 0x33, 0x21, 0xb9, 0xe2, 0x22, 0xaa, 0xb1,
	0xdd, 0x36, 0x93, 0x8a, 0x14, 0xa1, 0x10, 0x63, 0xa8, 0xce, 0x03, 0xd3, 0x28, 0x19, 0xe5, 0x1b,
	0x35, 0xc8, 0x42, 0x9b, 0x81, 0xf3, 0xd5, 0x00, 0xb3, 0xb7, 0x58, 0xc6, 0x22, 0x92, 0x8c, 0x4c,
	0x41, 0x5e, 0x25, 0x34, 0x60, 0x09, 0x16, 0xe2, 0x8d, 0x4c, 0xc3, 0x38, 0x97, 0xf5, 0xb7, 0x22,
	0x0a, 0xcd, 0xff, 0x4a, 0x46, 0xf9, 0xff, 0x5a, 0x9e, 0xcb, 0x2d, 0x11, 0x85, 0x84, 0xc0, 0xa8,
	0xe4, 0xef, 0x99, 0x39, 0xd2, 0x85, 0x77, 0xcf, 0x64, 0x15, 0xf2, 0x2d, 0x9a, 0x84, 0x3c, 0x32,
	0x47, 0x4b, 0x46, 0xb9, 0xb0, 0x3c, 0xeb, 0x62, 0x73, 0x69, 0x3b, 0x2e, 0xb6, 0xe3, 0x56, 0x99,
	0xbf, 0x2e, 0x78, 0x54, 0x43, 0xac, 0x53, 0x81, 0x3b, 0x5d, 0x5b, 0x5b, 0x7c, 0xb7, 0xcd, 0x03,
	0xae, 0x3a, 0x59, 0x47, 0x26, 0x8c, 0xd3, 0x20, 0x48, 0x98, 0x94, 0x68, 0x2a, 0xbb, 0x3a, 0x3e,
	0x4c, 0x9d, 0x2f, 0xc1, 0x3e, 0x36, 0x21, 0x2f, 0x9b, 0x34, 0x61, 0x58, 0xb2, 0x56, 0xd9, 0x3f,
	0x2c, 0xe6, 0x7e, 0x1d, 0x16, 0x67, 0xb4, 0x13, 0x19, 0xbc, 0x71, 0xb9, 0xf0, 0x5a, 0x54, 0x35,
	0xdd, 0x2d, 0x16, 0x52, 0xbf, 0x53, 0x65, 0xfe, 0x8f, 0x6f, 0x4b, 0x80, 0x46, 0xab, 0xcc, 0xaf,
	0x21, 0x81, 0xb3, 0x00, 0x73, 0xd9, 0x73, 0x69, 0x1d, 0x9a, 0xbe, 0xd8, 0x3a, 0x8d, 0x82, 0xf4,
	0xc8, 0x24, 0xda, 0x74, 0x36, 0x60, 0x7e, 0x08, 0x0e, 0xbd, 0xd9, 0x00, 0xfe, 0x49, 0xd4, 0x34,
	0x4a, 0x23, 0xe9, 0x0f, 0x74, 0x1a, 0x71, 0x66, 0xc1, 0xca, 0x88, 0x9e, 0xb6, 0xa3, 0x80, 0x47,
	0x61, 0x8d, 0x2a, 0x96, 0xc9, 0x48, 0x98, 0xe9, 0x9b, 0x45, 0xf2, 0x17, 0x30, 0xb1, 0xa3, 0xc3,
	0xf5, 0x84, 0x2a, 0x76, 0xfd, 0xf6, 0x0b, 0x3b, 0xa7, 0xec, 0xce, 0x1c, 0x38, 0xe7, 0x47, 0x06,
	0xc5, 0x37, 0xa3, 0x1d, 0x91, 0x59, 0xfb, 0x00, 0xf7, 0x2f, 0x44, 0xfd, 0x53, 0x8b, 0x45, 0xb8,
	0x97, 0x89, 0x3f, 0xf1, 0xfd, 0xa4, 0xcd, 0x82, 0xec, 0x79, 0xd0, 0xdd, 0x47, 0xb0, 0x07, 0x01,
	0xd0, 0xd8, 0x36, 0xdc, 0xa4, 0x3a, 0x53, 0x47, 0xe6, 0xeb, 0x7b, 0x9b, 0xa4, 0x67, 0x34, 0x96,
	0xbf, 0x8f, 0xc1, 0x58, 0x57, 0x9e, 0xbc, 0x82, 0xc2, 0x5f, 0x0f, 0x44, 0x1e, 0xb8, 0x67, 0xff,
	0x2c, 0xdc, 0x01, 0x8b, 0x6d, 0x95, 0x87, 0x03, 0xb1, 0x8f, 0x97, 0x30, 0x71, 0x32, 0x84, 0x5c,
	0x75, 0xc8, 0x7c, 0xdf, 0xca, 0xf3, 0x7b, 0x66, 0x2d, 0x0c, 0x83, 0x21, 0xfd, 0x67, 0x03, 0xcc,
	0x41, 0x43, 0x4e, 0x56, 0x07, 0xb9, 0xbc, 0x68, 0x77, 0xac, 0x47, 0x57, 0xac, 0x42, 0x27, 0x1c,
	0x26, 0xcf, 0xae, 0x01, 0x59, 0x1c, 0x44, 0xd4, 0xbb, 0x49, 0xd6, 0xc3, 0x4b, 0x61, 0x51, 0xea,
	0x93, 0x01, 0x53, 0xfd, 0xe7, 0x9a, 0x2c, 0x0f, 0xfb, 0x61, 0x7a, 0x57, 0xc5, 0x5a, 0xb9, 0x52,
	0x0d, 0x7a, 0x48, 0xe0, 0x56, 0xcf, 0xf0, 0x92, 0xa5, 0x41, 0x4c, 0x7d, 0xb7, 0xc0, 0x72, 0x2f,
	0x0b, 0xd7, 0x9a, 0x6b, 0xd5, 0xfd, 0x23, 0xdb, 0x38, 0x38, 0xb2, 0x8d, 0xdf, 0x47, 0xb6, 0xf1,
	0xe5, 0xd8, 0xce, 0x1d, 0x1c, 0xdb, 0xb9, 0x9f, 0xc7, 0x76, 0x6e, 0x7b, 0x31, 0xe4, 0xaa, 0xd9,
	0x6e, 0xb8, 0xbe, 0x68, 0x79, 0x9a, 0x73, 0x29, 0x4e, 0xc4, 0x6b, 0x3c, 0x7b, 0xef, 0xf4, 0x97,
	0x51, 0x75, 0x62, 0x26, 0x1b, 0xf9, 0xee, 0x67, 0x6b, 0xe5, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x60, 0x8f, 0x02, 0x54, 0x35, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	GetPosition(ctx context.Context, in *QueryGetPositionRequest, opts ...grpc.CallOption) (*QueryGetPositionResponse, error)
	GetLiquidity(ctx context.Context, in *QueryLiquidityRequest, opts ...grpc.CallOption) (*QueryLiquidityResponse, error)
	GetLiquidationCandidates(ctx context.Context, in *QueryGetLiquidationCandidatesRequest, opts ...grpc.CallOption) (*QueryGetLiquidationCandidatesResponse, error)
	GetFundingRate(ctx context.Context, in *QueryGetFundingRateRequest, opts ...grpc.CallOption) (*QueryGetFundingRateResponse, error)
	GetPositionFundingInfo(ctx context.Context, in *QueryGetPositionFundingInfoRequest, opts ...grpc.CallOption) (*QueryGetPositionFundingInfoResponse, error)
	GetAccruedFunding(ctx context.Context, in *QueryGetAccruedFundingRequest, opts ...grpc.CallOption) (*QueryGetAccruedFundingResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) GetPosition(ctx context.Context, in *QueryGetPositionRequest, opts ...grpc.CallOption) (*QueryGetPositionResponse, error) {
	out := new(QueryGetPositionResponse)
	err := c.cc.Invoke(ctx, "/aether.perp.v1.Query/GetPosition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetLiquidity(ctx context.Context, in *QueryLiquidityRequest, opts ...grpc.CallOption) (*QueryLiquidityResponse, error) {
	out := new(QueryLiquidityResponse)
	err := c.cc.Invoke(ctx, "/aether.perp.v1.Query/GetLiquidity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetLiquidationCandidates(ctx context.Context, in *QueryGetLiquidationCandidatesRequest, opts ...grpc.CallOption) (*QueryGetLiquidationCandidatesResponse, error) {
	out := new(QueryGetLiquidationCandidatesResponse)
	err := c.cc.Invoke(ctx, "/aether.perp.v1.Query/GetLiquidationCandidates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetFundingRate(ctx context.Context, in *QueryGetFundingRateRequest, opts ...grpc.CallOption) (*QueryGetFundingRateResponse, error) {
	out := new(QueryGetFundingRateResponse)
	err := c.cc.Invoke(ctx, "/aether.perp.v1.Query/GetFundingRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetPositionFundingInfo(ctx context.Context, in *QueryGetPositionFundingInfoRequest, opts ...grpc.CallOption) (*QueryGetPositionFundingInfoResponse, error) {
	out := new(QueryGetPositionFundingInfoResponse)
	err := c.cc.Invoke(ctx, "/aether.perp.v1.Query/GetPositionFundingInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetAccruedFunding(ctx context.Context, in *QueryGetAccruedFundingRequest, opts ...grpc.CallOption) (*QueryGetAccruedFundingResponse, error) {
	out := new(QueryGetAccruedFundingResponse)
	err := c.cc.Invoke(ctx, "/aether.perp.v1.Query/GetAccruedFunding", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	GetPosition(context.Context, *QueryGetPositionRequest) (*QueryGetPositionResponse, error)
	GetLiquidity(context.Context, *QueryLiquidityRequest) (*QueryLiquidityResponse, error)
	GetLiquidationCandidates(context.Context, *QueryGetLiquidationCandidatesRequest) (*QueryGetLiquidationCandidatesResponse, error)
	GetFundingRate(context.Context, *QueryGetFundingRateRequest) (*QueryGetFundingRateResponse, error)
	GetPositionFundingInfo(context.Context, *QueryGetPositionFundingInfoRequest) (*QueryGetPositionFundingInfoResponse, error)
	GetAccruedFunding(context.Context, *QueryGetAccruedFundingRequest) (*QueryGetAccruedFundingResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) GetPosition(ctx context.Context, req *QueryGetPositionRequest) (*QueryGetPositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPosition not implemented")
}
func (*UnimplementedQueryServer) GetLiquidity(ctx context.Context, req *QueryLiquidityRequest) (*QueryLiquidityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLiquidity not implemented")
}
func (*UnimplementedQueryServer) GetLiquidationCandidates(ctx context.Context, req *QueryGetLiquidationCandidatesRequest) (*QueryGetLiquidationCandidatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLiquidationCandidates not implemented")
}
func (*UnimplementedQueryServer) GetFundingRate(ctx context.Context, req *QueryGetFundingRateRequest) (*QueryGetFundingRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFundingRate not implemented")
}
func (*UnimplementedQueryServer) GetPositionFundingInfo(ctx context.Context, req *QueryGetPositionFundingInfoRequest) (*QueryGetPositionFundingInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPositionFundingInfo not implemented")
}
func (*UnimplementedQueryServer) GetAccruedFunding(ctx context.Context, req *QueryGetAccruedFundingRequest) (*QueryGetAccruedFundingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccruedFunding not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_GetPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aether.perp.v1.Query/GetPosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetPosition(ctx, req.(*QueryGetPositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetLiquidity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLiquidityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetLiquidity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aether.perp.v1.Query/GetLiquidity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetLiquidity(ctx, req.(*QueryLiquidityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetLiquidationCandidates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetLiquidationCandidatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetLiquidationCandidates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aether.perp.v1.Query/GetLiquidationCandidates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetLiquidationCandidates(ctx, req.(*QueryGetLiquidationCandidatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetFundingRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetFundingRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetFundingRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aether.perp.v1.Query/GetFundingRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetFundingRate(ctx, req.(*QueryGetFundingRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetPositionFundingInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPositionFundingInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetPositionFundingInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aether.perp.v1.Query/GetPositionFundingInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetPositionFundingInfo(ctx, req.(*QueryGetPositionFundingInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetAccruedFunding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAccruedFundingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetAccruedFunding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aether.perp.v1.Query/GetAccruedFunding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetAccruedFunding(ctx, req.(*QueryGetAccruedFundingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "aether.perp.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPosition",
			Handler:    _Query_GetPosition_Handler,
		},
		{
			MethodName: "GetLiquidity",
			Handler:    _Query_GetLiquidity_Handler,
		},
		{
			MethodName: "GetLiquidationCandidates",
			Handler:    _Query_GetLiquidationCandidates_Handler,
		},
		{
			MethodName: "GetFundingRate",
			Handler:    _Query_GetFundingRate_Handler,
		},
		{
			MethodName: "GetPositionFundingInfo",
			Handler:    _Query_GetPositionFundingInfo_Handler,
		},
		{
			MethodName: "GetAccruedFunding",
			Handler:    _Query_GetAccruedFunding_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "aether/perp/v1/query.proto",
}

func (m *QueryGetPositionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPositionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPositionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PositionId) > 0 {
		i -= len(m.PositionId)
		copy(dAtA[i:], m.PositionId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.PositionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPositionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPositionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPositionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Margin != nil {
		{
			size, err := m.Margin.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Size_) > 0 {
		i -= len(m.Size_)
		copy(dAtA[i:], m.Size_)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Size_)))
		i--
		dAtA[i] = 0x1a
	}
	if m.IsLong {
		i--
		if m.IsLong {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Trader) > 0 {
		i -= len(m.Trader)
		copy(dAtA[i:], m.Trader)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Trader)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLiquidityRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLiquidityRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLiquidityRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLiquidityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLiquidityResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLiquidityResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Shares.Size()
		i -= size
		if _, err := m.Shares.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetLiquidationCandidatesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLiquidationCandidatesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLiquidationCandidatesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetLiquidationCandidatesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLiquidationCandidatesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLiquidationCandidatesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Candidates) > 0 {
		for iNdEx := len(m.Candidates) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Candidates[iNdEx])
			copy(dAtA[i:], m.Candidates[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Candidates[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetFundingRateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetFundingRateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetFundingRateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetFundingRateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetFundingRateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetFundingRateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.FundingRate.Size()
		i -= size
		if _, err := m.FundingRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetPositionFundingInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPositionFundingInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPositionFundingInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetPositionFundingInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPositionFundingInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPositionFundingInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.FundingRate.Size()
		i -= size
		if _, err := m.FundingRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetAccruedFundingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAccruedFundingRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAccruedFundingRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetAccruedFundingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAccruedFundingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAccruedFundingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.AccruedFunding.Size()
		i -= size
		if _, err := m.AccruedFunding.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryGetPositionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PositionId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPositionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Trader)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.IsLong {
		n += 2
	}
	l = len(m.Size_)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Margin != nil {
		l = m.Margin.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLiquidityRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLiquidityResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Shares.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetLiquidationCandidatesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetLiquidationCandidatesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Candidates) > 0 {
		for _, s := range m.Candidates {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryGetFundingRateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetFundingRateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.FundingRate.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetPositionFundingInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetPositionFundingInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.FundingRate.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetAccruedFundingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetAccruedFundingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.AccruedFunding.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryGetPositionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPositionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPositionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PositionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPositionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPositionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPositionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trader", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Trader = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLong", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsLong = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Size_ = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Margin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Margin == nil {
				m.Margin = &types.DecCoin{}
			}
			if err := m.Margin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLiquidityRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLiquidityRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLiquidityRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLiquidityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLiquidityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLiquidityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shares", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Shares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLiquidationCandidatesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLiquidationCandidatesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLiquidationCandidatesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLiquidationCandidatesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLiquidationCandidatesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLiquidationCandidatesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Candidates", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Candidates = append(m.Candidates, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetFundingRateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetFundingRateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetFundingRateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetFundingRateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetFundingRateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetFundingRateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FundingRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FundingRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPositionFundingInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPositionFundingInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPositionFundingInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPositionFundingInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPositionFundingInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPositionFundingInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FundingRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FundingRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAccruedFundingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAccruedFundingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAccruedFundingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAccruedFundingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAccruedFundingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAccruedFundingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccruedFunding", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AccruedFunding.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
