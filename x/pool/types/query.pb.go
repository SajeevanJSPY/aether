// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: aether/pool/v1/query.proto

package types

import (
	context "context"
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryGetPoolInfoRequest struct {
	PoolId uint64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
}

func (m *QueryGetPoolInfoRequest) Reset()         { *m = QueryGetPoolInfoRequest{} }
func (m *QueryGetPoolInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPoolInfoRequest) ProtoMessage()    {}
func (*QueryGetPoolInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b079ffd9b841a1bc, []int{0}
}
func (m *QueryGetPoolInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPoolInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPoolInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPoolInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPoolInfoRequest.Merge(m, src)
}
func (m *QueryGetPoolInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPoolInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPoolInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPoolInfoRequest proto.InternalMessageInfo

func (m *QueryGetPoolInfoRequest) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

type QueryGetPoolInfoResponse struct {
	Denom       string                `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	TotalAmount *types.DecCoin        `protobuf:"bytes,2,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
	TotalShares cosmossdk_io_math.Int `protobuf:"bytes,3,opt,name=total_shares,json=totalShares,proto3,customtype=cosmossdk.io/math.Int" json:"total_shares"`
	TotalUsed   cosmossdk_io_math.Int `protobuf:"bytes,4,opt,name=total_used,json=totalUsed,proto3,customtype=cosmossdk.io/math.Int" json:"total_used"`
	CreatedAt   time.Time             `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at"`
}

func (m *QueryGetPoolInfoResponse) Reset()         { *m = QueryGetPoolInfoResponse{} }
func (m *QueryGetPoolInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPoolInfoResponse) ProtoMessage()    {}
func (*QueryGetPoolInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b079ffd9b841a1bc, []int{1}
}
func (m *QueryGetPoolInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPoolInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPoolInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPoolInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPoolInfoResponse.Merge(m, src)
}
func (m *QueryGetPoolInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPoolInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPoolInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPoolInfoResponse proto.InternalMessageInfo

func (m *QueryGetPoolInfoResponse) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *QueryGetPoolInfoResponse) GetTotalAmount() *types.DecCoin {
	if m != nil {
		return m.TotalAmount
	}
	return nil
}

func (m *QueryGetPoolInfoResponse) GetCreatedAt() time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return time.Time{}
}

type QueryGetAllPoolInfosRequest struct {
}

func (m *QueryGetAllPoolInfosRequest) Reset()         { *m = QueryGetAllPoolInfosRequest{} }
func (m *QueryGetAllPoolInfosRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAllPoolInfosRequest) ProtoMessage()    {}
func (*QueryGetAllPoolInfosRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b079ffd9b841a1bc, []int{2}
}
func (m *QueryGetAllPoolInfosRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllPoolInfosRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllPoolInfosRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllPoolInfosRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllPoolInfosRequest.Merge(m, src)
}
func (m *QueryGetAllPoolInfosRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllPoolInfosRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllPoolInfosRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllPoolInfosRequest proto.InternalMessageInfo

type QueryGetAllPoolInfosResponse struct {
	Responses []*QueryGetPoolInfoResponse `protobuf:"bytes,1,rep,name=responses,proto3" json:"responses,omitempty"`
}

func (m *QueryGetAllPoolInfosResponse) Reset()         { *m = QueryGetAllPoolInfosResponse{} }
func (m *QueryGetAllPoolInfosResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetAllPoolInfosResponse) ProtoMessage()    {}
func (*QueryGetAllPoolInfosResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b079ffd9b841a1bc, []int{3}
}
func (m *QueryGetAllPoolInfosResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAllPoolInfosResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAllPoolInfosResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAllPoolInfosResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAllPoolInfosResponse.Merge(m, src)
}
func (m *QueryGetAllPoolInfosResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAllPoolInfosResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAllPoolInfosResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAllPoolInfosResponse proto.InternalMessageInfo

func (m *QueryGetAllPoolInfosResponse) GetResponses() []*QueryGetPoolInfoResponse {
	if m != nil {
		return m.Responses
	}
	return nil
}

type QueryGetUserInfoRequest struct {
	User string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (m *QueryGetUserInfoRequest) Reset()         { *m = QueryGetUserInfoRequest{} }
func (m *QueryGetUserInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetUserInfoRequest) ProtoMessage()    {}
func (*QueryGetUserInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b079ffd9b841a1bc, []int{4}
}
func (m *QueryGetUserInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetUserInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetUserInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetUserInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetUserInfoRequest.Merge(m, src)
}
func (m *QueryGetUserInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetUserInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetUserInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetUserInfoRequest proto.InternalMessageInfo

func (m *QueryGetUserInfoRequest) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

type QueryGetUserInfoResponse struct {
	Info []*QueryGetUserInfoResponse_Info `protobuf:"bytes,1,rep,name=info,proto3" json:"info,omitempty"`
}

func (m *QueryGetUserInfoResponse) Reset()         { *m = QueryGetUserInfoResponse{} }
func (m *QueryGetUserInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetUserInfoResponse) ProtoMessage()    {}
func (*QueryGetUserInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b079ffd9b841a1bc, []int{5}
}
func (m *QueryGetUserInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetUserInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetUserInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetUserInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetUserInfoResponse.Merge(m, src)
}
func (m *QueryGetUserInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetUserInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetUserInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetUserInfoResponse proto.InternalMessageInfo

func (m *QueryGetUserInfoResponse) GetInfo() []*QueryGetUserInfoResponse_Info {
	if m != nil {
		return m.Info
	}
	return nil
}

type QueryGetUserInfoResponse_Info struct {
	PoolId uint64                `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	Shares cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=shares,proto3,customtype=cosmossdk.io/math.Int" json:"shares"`
}

func (m *QueryGetUserInfoResponse_Info) Reset()         { *m = QueryGetUserInfoResponse_Info{} }
func (m *QueryGetUserInfoResponse_Info) String() string { return proto.CompactTextString(m) }
func (*QueryGetUserInfoResponse_Info) ProtoMessage()    {}
func (*QueryGetUserInfoResponse_Info) Descriptor() ([]byte, []int) {
	return fileDescriptor_b079ffd9b841a1bc, []int{5, 0}
}
func (m *QueryGetUserInfoResponse_Info) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetUserInfoResponse_Info) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetUserInfoResponse_Info.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetUserInfoResponse_Info) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetUserInfoResponse_Info.Merge(m, src)
}
func (m *QueryGetUserInfoResponse_Info) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetUserInfoResponse_Info) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetUserInfoResponse_Info.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetUserInfoResponse_Info proto.InternalMessageInfo

func (m *QueryGetUserInfoResponse_Info) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b079ffd9b841a1bc, []int{6}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

type QueryParamsResponse struct {
	MaxPools          uint64                `protobuf:"varint,1,opt,name=max_pools,json=maxPools,proto3" json:"max_pools,omitempty"`
	MinDepositAmount  cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=min_deposit_amount,json=minDepositAmount,proto3,customtype=cosmossdk.io/math.Int" json:"min_deposit_amount"`
	MaxWithdrawAmount cosmossdk_io_math.Int `protobuf:"bytes,3,opt,name=max_withdraw_amount,json=maxWithdrawAmount,proto3,customtype=cosmossdk.io/math.Int" json:"max_withdraw_amount"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b079ffd9b841a1bc, []int{7}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetMaxPools() uint64 {
	if m != nil {
		return m.MaxPools
	}
	return 0
}

func init() {
	proto.RegisterType((*QueryGetPoolInfoRequest)(nil), "aether.pool.v1.QueryGetPoolInfoRequest")
	proto.RegisterType((*QueryGetPoolInfoResponse)(nil), "aether.pool.v1.QueryGetPoolInfoResponse")
	proto.RegisterType((*QueryGetAllPoolInfosRequest)(nil), "aether.pool.v1.QueryGetAllPoolInfosRequest")
	proto.RegisterType((*QueryGetAllPoolInfosResponse)(nil), "aether.pool.v1.QueryGetAllPoolInfosResponse")
	proto.RegisterType((*QueryGetUserInfoRequest)(nil), "aether.pool.v1.QueryGetUserInfoRequest")
	proto.RegisterType((*QueryGetUserInfoResponse)(nil), "aether.pool.v1.QueryGetUserInfoResponse")
	proto.RegisterType((*QueryGetUserInfoResponse_Info)(nil), "aether.pool.v1.QueryGetUserInfoResponse.Info")
	proto.RegisterType((*QueryParamsRequest)(nil), "aether.pool.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "aether.pool.v1.QueryParamsResponse")
}

func init() { proto.RegisterFile("aether/pool/v1/query.proto", fileDescriptor_b079ffd9b841a1bc) }

var fileDescriptor_b079ffd9b841a1bc = []byte{
	// 693 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0xcd, 0x52, 0x13, 0x4d,
	0x14, 0xcd, 0x40, 0xc8, 0x47, 0x6e, 0xbe, 0xfa, 0x7e, 0x1a, 0x2c, 0xe2, 0x80, 0x13, 0x6a, 0x5c,
	0x98, 0x12, 0xd3, 0x53, 0x89, 0x0f, 0x60, 0x05, 0x28, 0xad, 0xb8, 0xb0, 0x20, 0x4a, 0x59, 0xea,
	0x22, 0x76, 0x32, 0x9d, 0x64, 0x74, 0x66, 0x7a, 0x98, 0xee, 0x81, 0xf0, 0x0e, 0x2e, 0x78, 0x18,
	0xdf, 0xc0, 0x0d, 0x4b, 0x8a, 0x95, 0xe5, 0x02, 0x2d, 0xd8, 0xf9, 0x14, 0xd6, 0x74, 0xf7, 0x18,
	0xfe, 0xa2, 0xe0, 0xae, 0x6f, 0x6e, 0x9f, 0xd3, 0xe7, 0x9e, 0x3e, 0x9d, 0x01, 0x93, 0x50, 0x31,
	0xa4, 0xb1, 0x13, 0x31, 0xe6, 0x3b, 0x3b, 0x75, 0x67, 0x3b, 0xa1, 0xf1, 0x1e, 0x8e, 0x62, 0x26,
	0x18, 0xfa, 0x47, 0xf5, 0x70, 0xda, 0xc3, 0x3b, 0x75, 0x73, 0x7e, 0xc0, 0x06, 0x4c, 0xb6, 0x9c,
	0x74, 0xa5, 0x76, 0x99, 0xb7, 0x7b, 0x8c, 0x07, 0x8c, 0x77, 0x54, 0x43, 0x15, 0xba, 0x65, 0xa9,
	0xca, 0xe9, 0x12, 0x4e, 0x9d, 0x9d, 0x7a, 0x97, 0x0a, 0x52, 0x77, 0x7a, 0xcc, 0x0b, 0x75, 0xbf,
	0x32, 0x60, 0x6c, 0xe0, 0x53, 0x47, 0x56, 0xdd, 0xa4, 0xef, 0x08, 0x2f, 0xa0, 0x5c, 0x90, 0x20,
	0x52, 0x1b, 0xec, 0x06, 0x2c, 0x6c, 0xa6, 0x82, 0x9e, 0x50, 0xb1, 0xc1, 0x98, 0xdf, 0x0a, 0xfb,
	0xac, 0x4d, 0xb7, 0x13, 0xca, 0x05, 0x5a, 0x80, 0xbf, 0x52, 0x5d, 0x1d, 0xcf, 0x2d, 0x1b, 0xcb,
	0x46, 0x35, 0xdf, 0x2e, 0xa4, 0x65, 0xcb, 0xb5, 0x8f, 0xa6, 0xa0, 0x7c, 0x19, 0xc4, 0x23, 0x16,
	0x72, 0x8a, 0xe6, 0x61, 0xc6, 0xa5, 0x21, 0x0b, 0x24, 0xa6, 0xd8, 0x56, 0x05, 0x7a, 0x04, 0x7f,
	0x0b, 0x26, 0x88, 0xdf, 0x21, 0x01, 0x4b, 0x42, 0x51, 0x9e, 0x5a, 0x36, 0xaa, 0xa5, 0xc6, 0x12,
	0xd6, 0xc3, 0xa4, 0xf2, 0xb1, 0x96, 0x8f, 0xd7, 0x69, 0x6f, 0x8d, 0x79, 0x61, 0xbb, 0x24, 0x11,
	0x4d, 0x09, 0x40, 0xcf, 0x32, 0x02, 0x3e, 0x24, 0x31, 0xe5, 0xe5, 0xe9, 0x94, 0x7d, 0x75, 0xe5,
	0xe0, 0xb8, 0x92, 0xfb, 0x72, 0x5c, 0xb9, 0xa5, 0x78, 0xb8, 0xfb, 0x1e, 0x7b, 0xcc, 0x09, 0x88,
	0x18, 0xe2, 0x56, 0x28, 0x8e, 0x3e, 0xd6, 0x40, 0x1f, 0xd0, 0x0a, 0x85, 0xe6, 0x7b, 0x2e, 0xf1,
	0xe8, 0x29, 0x80, 0xe2, 0x4b, 0x38, 0x75, 0xcb, 0xf9, 0x9b, 0xb3, 0x15, 0x25, 0x7c, 0x8b, 0x53,
	0x17, 0xad, 0x01, 0xf4, 0x62, 0x4a, 0x04, 0x75, 0x3b, 0x44, 0x94, 0x67, 0xe4, 0x68, 0x26, 0x56,
	0xce, 0xe3, 0xcc, 0x79, 0xfc, 0x22, 0x73, 0x7e, 0x75, 0x36, 0x3d, 0x67, 0xff, 0x6b, 0xc5, 0x68,
	0x17, 0x35, 0xae, 0x29, 0xec, 0x3b, 0xb0, 0x98, 0x79, 0xda, 0xf4, 0xfd, 0xcc, 0x56, 0xae, 0x2f,
	0xc3, 0xee, 0xc3, 0xd2, 0xd5, 0x6d, 0x6d, 0xfb, 0x63, 0x28, 0xc6, 0x7a, 0xcd, 0xcb, 0xc6, 0xf2,
	0x74, 0xb5, 0xd4, 0xa8, 0xe2, 0xf3, 0xe9, 0xc2, 0x93, 0xee, 0xac, 0x3d, 0x86, 0xda, 0xb5, 0x71,
	0x1e, 0xb6, 0x38, 0x8d, 0xcf, 0xe6, 0x01, 0x41, 0x3e, 0xe1, 0x34, 0xd6, 0x17, 0x2b, 0xd7, 0xf6,
	0x27, 0x63, 0x1c, 0x85, 0xf1, 0x7e, 0xad, 0xa9, 0x09, 0x79, 0x2f, 0xec, 0x33, 0x2d, 0xa7, 0x36,
	0x49, 0xce, 0x45, 0x1c, 0x96, 0x85, 0x84, 0x9a, 0x2e, 0xe4, 0xd3, 0x6a, 0x62, 0x16, 0xd1, 0x1a,
	0x14, 0x74, 0x22, 0xa6, 0x6e, 0x7e, 0x87, 0x1a, 0x6a, 0xcf, 0x03, 0x92, 0x62, 0x36, 0x48, 0x4c,
	0x82, 0x9f, 0x96, 0x7f, 0x37, 0x60, 0xee, 0xdc, 0xcf, 0x7a, 0xac, 0x45, 0x28, 0x06, 0x64, 0xd4,
	0x49, 0x05, 0x70, 0xad, 0x66, 0x36, 0x20, 0xa3, 0xd4, 0x55, 0x8e, 0x5e, 0x01, 0x0a, 0xbc, 0xb0,
	0xe3, 0xd2, 0x88, 0x71, 0x4f, 0x9c, 0x8d, 0xfb, 0x0d, 0xb5, 0xfd, 0x17, 0x78, 0xe1, 0xba, 0x62,
	0xd1, 0x4f, 0xe0, 0x0d, 0xcc, 0xa5, 0xe7, 0xee, 0x7a, 0x62, 0xe8, 0xc6, 0x64, 0x37, 0xe3, 0xfe,
	0x83, 0x97, 0xf0, 0x7f, 0x40, 0x46, 0x2f, 0x35, 0x8d, 0x22, 0x6f, 0x7c, 0x98, 0x86, 0x19, 0x39,
	0x2c, 0x7a, 0x0b, 0xa5, 0x33, 0x19, 0x41, 0xf7, 0x7e, 0x9f, 0x22, 0x69, 0x97, 0x79, 0xed, 0xb8,
	0x21, 0x1f, 0xfe, 0xbd, 0x10, 0x63, 0xb4, 0x32, 0x09, 0x7c, 0xc5, 0x5b, 0x30, 0x1f, 0x5c, 0x6f,
	0xb3, 0x3e, 0x4d, 0xcd, 0x93, 0x85, 0x6c, 0xf2, 0x3c, 0x17, 0xe2, 0x3e, 0x79, 0x9e, 0x4b, 0x39,
	0xdf, 0x84, 0x82, 0x8a, 0x08, 0xb2, 0xaf, 0xc4, 0x9c, 0x8b, 0x95, 0x79, 0xf7, 0x97, 0x7b, 0x14,
	0xe5, 0xea, 0xfa, 0xc1, 0x89, 0x65, 0x1c, 0x9e, 0x58, 0xc6, 0xb7, 0x13, 0xcb, 0xd8, 0x3f, 0xb5,
	0x72, 0x87, 0xa7, 0x56, 0xee, 0xf3, 0xa9, 0x95, 0x7b, 0x7d, 0x7f, 0xe0, 0x89, 0x61, 0xd2, 0xc5,
	0x3d, 0x16, 0x38, 0x8a, 0xa8, 0x16, 0xc5, 0xec, 0x9d, 0x5e, 0x3b, 0x23, 0xf5, 0x9d, 0x11, 0x7b,
	0x11, 0xe5, 0xdd, 0x82, 0xfc, 0xf3, 0x79, 0xf8, 0x23, 0x00, 0x00, 0xff, 0xff, 0x96, 0x76, 0x6a,
	0x68, 0x83, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	GetPoolInfo(ctx context.Context, in *QueryGetPoolInfoRequest, opts ...grpc.CallOption) (*QueryGetPoolInfoResponse, error)
	GetAllPoolInfos(ctx context.Context, in *QueryGetAllPoolInfosRequest, opts ...grpc.CallOption) (*QueryGetAllPoolInfosResponse, error)
	GetUserInfo(ctx context.Context, in *QueryGetUserInfoRequest, opts ...grpc.CallOption) (*QueryGetUserInfoResponse, error)
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) GetPoolInfo(ctx context.Context, in *QueryGetPoolInfoRequest, opts ...grpc.CallOption) (*QueryGetPoolInfoResponse, error) {
	out := new(QueryGetPoolInfoResponse)
	err := c.cc.Invoke(ctx, "/aether.pool.v1.Query/GetPoolInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetAllPoolInfos(ctx context.Context, in *QueryGetAllPoolInfosRequest, opts ...grpc.CallOption) (*QueryGetAllPoolInfosResponse, error) {
	out := new(QueryGetAllPoolInfosResponse)
	err := c.cc.Invoke(ctx, "/aether.pool.v1.Query/GetAllPoolInfos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetUserInfo(ctx context.Context, in *QueryGetUserInfoRequest, opts ...grpc.CallOption) (*QueryGetUserInfoResponse, error) {
	out := new(QueryGetUserInfoResponse)
	err := c.cc.Invoke(ctx, "/aether.pool.v1.Query/GetUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/aether.pool.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	GetPoolInfo(context.Context, *QueryGetPoolInfoRequest) (*QueryGetPoolInfoResponse, error)
	GetAllPoolInfos(context.Context, *QueryGetAllPoolInfosRequest) (*QueryGetAllPoolInfosResponse, error)
	GetUserInfo(context.Context, *QueryGetUserInfoRequest) (*QueryGetUserInfoResponse, error)
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) GetPoolInfo(ctx context.Context, req *QueryGetPoolInfoRequest) (*QueryGetPoolInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPoolInfo not implemented")
}
func (*UnimplementedQueryServer) GetAllPoolInfos(ctx context.Context, req *QueryGetAllPoolInfosRequest) (*QueryGetAllPoolInfosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllPoolInfos not implemented")
}
func (*UnimplementedQueryServer) GetUserInfo(ctx context.Context, req *QueryGetUserInfoRequest) (*QueryGetUserInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_GetPoolInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPoolInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetPoolInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aether.pool.v1.Query/GetPoolInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetPoolInfo(ctx, req.(*QueryGetPoolInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetAllPoolInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAllPoolInfosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetAllPoolInfos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aether.pool.v1.Query/GetAllPoolInfos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetAllPoolInfos(ctx, req.(*QueryGetAllPoolInfosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetUserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aether.pool.v1.Query/GetUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetUserInfo(ctx, req.(*QueryGetUserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aether.pool.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "aether.pool.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPoolInfo",
			Handler:    _Query_GetPoolInfo_Handler,
		},
		{
			MethodName: "GetAllPoolInfos",
			Handler:    _Query_GetAllPoolInfos_Handler,
		},
		{
			MethodName: "GetUserInfo",
			Handler:    _Query_GetUserInfo_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "aether/pool/v1/query.proto",
}

func (m *QueryGetPoolInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPoolInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPoolInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PoolId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPoolInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPoolInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPoolInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.CreatedAt, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.CreatedAt):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintQuery(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x2a
	{
		size := m.TotalUsed.Size()
		i -= size
		if _, err := m.TotalUsed.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.TotalShares.Size()
		i -= size
		if _, err := m.TotalShares.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.TotalAmount != nil {
		{
			size, err := m.TotalAmount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAllPoolInfosRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllPoolInfosRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllPoolInfosRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetAllPoolInfosResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAllPoolInfosResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAllPoolInfosResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Responses) > 0 {
		for iNdEx := len(m.Responses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Responses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetUserInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetUserInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetUserInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.User) > 0 {
		i -= len(m.User)
		copy(dAtA[i:], m.User)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.User)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetUserInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetUserInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetUserInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Info) > 0 {
		for iNdEx := len(m.Info) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Info[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetUserInfoResponse_Info) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetUserInfoResponse_Info) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetUserInfoResponse_Info) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Shares.Size()
		i -= size
		if _, err := m.Shares.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.PoolId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.MaxWithdrawAmount.Size()
		i -= size
		if _, err := m.MaxWithdrawAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.MinDepositAmount.Size()
		i -= size
		if _, err := m.MinDepositAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.MaxPools != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.MaxPools))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryGetPoolInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovQuery(uint64(m.PoolId))
	}
	return n
}

func (m *QueryGetPoolInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.TotalAmount != nil {
		l = m.TotalAmount.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	l = m.TotalShares.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.TotalUsed.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.CreatedAt)
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetAllPoolInfosRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetAllPoolInfosResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Responses) > 0 {
		for _, e := range m.Responses {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryGetUserInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetUserInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Info) > 0 {
		for _, e := range m.Info {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryGetUserInfoResponse_Info) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovQuery(uint64(m.PoolId))
	}
	l = m.Shares.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxPools != 0 {
		n += 1 + sovQuery(uint64(m.MaxPools))
	}
	l = m.MinDepositAmount.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.MaxWithdrawAmount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryGetPoolInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPoolInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPoolInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPoolInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPoolInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPoolInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TotalAmount == nil {
				m.TotalAmount = &types.DecCoin{}
			}
			if err := m.TotalAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalShares", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalShares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalUsed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalUsed.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllPoolInfosRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllPoolInfosRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllPoolInfosRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAllPoolInfosResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAllPoolInfosResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAllPoolInfosResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Responses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Responses = append(m.Responses, &QueryGetPoolInfoResponse{})
			if err := m.Responses[len(m.Responses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetUserInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetUserInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetUserInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetUserInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetUserInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetUserInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Info = append(m.Info, &QueryGetUserInfoResponse_Info{})
			if err := m.Info[len(m.Info)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetUserInfoResponse_Info) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Info: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Info: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shares", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Shares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPools", wireType)
			}
			m.MaxPools = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxPools |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinDepositAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinDepositAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxWithdrawAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxWithdrawAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
